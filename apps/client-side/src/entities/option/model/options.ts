import { Option, v1Api } from 'shared/api'import { RESOURCE } from 'shared/config'import { handlerError, handlerPrefix } from 'shared/lib'export const module = {	namespaced: true,	state: (): IEntityState<Option> => ({		list: [],		detail: {},		listLoading: false,		detailLoading: false,		createLoading: false,		updateLoading: false,		deleteLoading: false	}),	mutations: {		setList: (s: IEntityState<Option>, payload: { data: Option[] }) => (s.list = payload.data),		setDetail: (s: IEntityState<Option>, payload: { data: Option }) => (s.detail = payload.data),		setListLoading: (s: IEntityState<Option>, payload: boolean) => (s.listLoading = payload),		setDetailLoading: (s: IEntityState<Option>, payload: boolean) => (s.detailLoading = payload),		createOption: (s: IEntityState<Option>, payload: { data: Option }) => s.list.push(payload.data),		updateDetail: (s: IEntityState<Option>, payload: { data: Option }) => (s.detail = payload.data),		deleteDetail: (s: IEntityState<Option>, payload: { status: number }) =>			(s.detail = payload.status === 200 && {}),		setCreateLoading: (s: IEntityState<Option>, payload: boolean) => (s.createLoading = payload),		setUpdateLoading: (s: IEntityState<Option>, payload: boolean) => (s.updateLoading = payload),		setDeleteLoading: (s: IEntityState<Option>, payload: boolean) => (s.deleteLoading = payload)	},	actions: {		async getOptionListAsync({ commit }: ICommit): Promise<void> {			commit('setListLoading', true)			try {				commit('setList', await v1Api.options.getAllOptions())			} catch (e: unknown) {				handlerError(e, 'Ошибка получения типов объекта')			} finally {				commit('setListLoading', false)			}		},		async getOptionDetailAsync({ commit }: ICommit, id: v1Api.options.ICurrentOption): Promise<void> {			commit('setDetailLoading', true)			try {				commit('setDetail', await v1Api.options.getOptionById(id))			} catch (e: unknown) {				handlerError(e, 'Ошибка получения типа объекта')			} finally {				commit('setDetailLoading', false)			}		},		async createOptionAsync({ commit }: ICommit, params: v1Api.options.IOptionParams): Promise<void> {			commit('setCreateLoading', true)			try {				commit('createOption', await v1Api.options.createNewOption(params))			} catch (e: unknown) {				handlerError(e, 'Ошибка создания типа объекта')			} finally {				commit('setCreateLoading', false)			}		},		async updateOptionAsync({ commit }: ICommit, { id, params }: v1Api.options.IUpdateOptionProps): Promise<void> {			try {				commit('updateDetail', await v1Api.options.updateOptionById({ id, params }))			} catch (e: unknown) {				handlerError(e, 'Ошибка обновления типа объекта')			}		},		async deleteOptionAsync({ commit }: ICommit, id: v1Api.options.ICurrentOption): Promise<void> {			commit('setDeleteLoading', true)			try {				commit('deleteDetail', await v1Api.options.deleteleOptionById(id))			} catch (e: unknown) {				handlerError(e, 'Ошибка удаления типа объекта')			} finally {				commit('setDeleteLoading', false)			}		}	},	getters: {		useList: (s: IEntityState<Option>) => s.list,		useDetail: (s: IEntityState<Option>) => s.detail,		isListEmpty: (s: IEntityState<Option>) => s.list.length <= 0,		isDetailEmpty: (s: IEntityState<Option>) => s.detail.length <= 0,		isListLoading: (s: IEntityState<Option>) => s.listLoading,		isDetailLoading: (s: IEntityState<Option>) => s.detailLoading,		isCreateLoading: (s: IEntityState<Option>) => s.createLoading,		isUpdateLoading: (s: IEntityState<Option>) => s.updateLoading,		isDeleteLoading: (s: IEntityState<Option>) => s.deleteLoading	}}export const NAMESPACE = RESOURCE['options']export const actions = {	getOptionListAsync: handlerPrefix['without'](NAMESPACE, 'getOptionListAsync'),	getOptionDetailAsync: handlerPrefix['without'](NAMESPACE, 'getOptionDetailAsync'),	createOptionAsync: handlerPrefix['without'](NAMESPACE, 'createOptionAsync'),	updateOptionAsync: handlerPrefix['without'](NAMESPACE, 'updateOptionAsync'),	deleteOptionAsync: handlerPrefix['without'](NAMESPACE, 'deleteOptionAsync')}export const getters = {	useList: handlerPrefix['without'](NAMESPACE, 'useList'),	useDetail: handlerPrefix['without'](NAMESPACE, 'useDetail'),	isListLoading: handlerPrefix['without'](NAMESPACE, 'isListLoading'),	isDetailLoading: handlerPrefix['without'](NAMESPACE, 'isDetailLoading'),	isListEmpty: handlerPrefix['without'](NAMESPACE, 'isListEmpty'),	isDetailEmpty: handlerPrefix['without'](NAMESPACE, 'isDetailEmpty'),	isCreateLoading: handlerPrefix['without'](NAMESPACE, 'isCreateLoading'),	isUpdateLoading: handlerPrefix['without'](NAMESPACE, 'isUpdateLoading'),	// !DEPRECATED	isDeleteLoading: handlerPrefix['without'](NAMESPACE, 'isDeleteLoading')}