import { Property, v1Api } from 'shared/api'import { RESOURCE } from 'shared/config'import { handlerError, handlerPrefix } from 'shared/lib'import { router } from 'app/providers'export const module = {	namespaced: true,	state: (): IEntityState<Property> => ({		list: [],		detail: {},		listLoading: false,		detailLoading: false,		createLoading: false,		updateLoading: false,		deleteLoading: false	}),	mutations: {		setList: (s: IEntityState<Property>, payload: { data: Property[] }) =>			(s.list = payload.data.filter(				(p: Property) => p.facility?.id === Number(router.currentRoute.value.params.id)			)),		setListLoading: (s: IEntityState<Property>, payload: boolean) => (s.listLoading = payload),		createNewProperty: (s: IEntityState<Property>, payload: { data: Property }) => s.list.push(payload.data),		updatePropertyById: (s: IEntityState<Property>, payload: { data: Property }) => {			const { data } = payload			s.list.forEach((p: Property) => {				p.name = data.name				p.description = data.description				p.value = data.value				p.unit = data.unit				p.color = data.color				p.is_visible = data.is_visible				p.is_fast = data.is_fast				p.option = data.option			})		},		deletePropertyById: (s: IEntityState<Property>, id: number) => {			const index = s.list.findIndex((property: Property) => property.id === id)			if (index !== -1) {				s.list.splice(index, 1)			}		},		setCreateLoading: (s: IEntityState<Property>, payload: boolean) => (s.createLoading = payload),		setUpdateLoading: (s: IEntityState<Property>, payload: boolean) => (s.updateLoading = payload),		setDeleteLoading: (s: IEntityState<Property>, payload: boolean) => (s.deleteLoading = payload)	},	actions: {		async getPropertyListAsync({ commit }: ICommit): Promise<void> {			commit('setListLoading', true)			try {				commit('setList', await v1Api.properties.getAllProperties())			} catch (e: unknown) {				handlerError(e, 'Ошибка получения свойств')			} finally {				commit('setListLoading', false)			}		},		async createPropertyAsync({ commit }: ICommit, params: v1Api.properties.IPropertyParams): Promise<void> {			commit('setCreateLoading', true)			try {				commit('createNewProperty', await v1Api.properties.createNewProperty(params))			} catch (e: unknown) {				handlerError(e, 'Ошибка создания свойства')			} finally {				commit('setCreateLoading', false)			}		},		async updatePropertyAsync(			{ commit }: ICommit,			{ id, params }: v1Api.properties.IUpdatePropertyProps		): Promise<void> {			commit('setUpdateLoading', true)			try {				commit('updatePropertyById', await v1Api.properties.updatePropertyById({ id, params }))			} catch (e: unknown) {				handlerError(e, 'Ошибка обновления свойства')			} finally {				commit('setUpdateLoading', false)			}		},		async deletePropertyAsync({ commit }: ICommit, id: v1Api.properties.ICurrentProperty): Promise<void> {			commit('setDeleteLoading', true)			try {				await v1Api.properties.deletePropertyById(id)			} catch (e: unknown) {				handlerError(e, 'Ошибка удаления свойства')			} finally {				commit('setDeleteLoading', false)			}		}	},	getters: {		useList: (s: IEntityState<Property>) => s.list,		useDetail: (s: IEntityState<Property>) => s.detail,		isListLoading: (s: IEntityState<Property>) => s.listLoading,		isDetailLoading: (s: IEntityState<Property>) => s.detailLoading,		isListEmpty: (s: IEntityState<Property>) => s.list.length <= 0,		isDetailEmpty: (s: IEntityState<Property>) => s.detail.length <= 0,		isCreateLoading: (s: IEntityState<Property>) => s.createLoading,		isUpdateLoading: (s: IEntityState<Property>) => s.updateLoading	}}export const NAMESPACE = RESOURCE['properties']export const actions = {	getPropertyListAsync: handlerPrefix['without'](NAMESPACE, 'getPropertyListAsync'),	createPropertyAsync: handlerPrefix['without'](NAMESPACE, 'createPropertyAsync'),	updatePropertyAsync: handlerPrefix['without'](NAMESPACE, 'updatePropertyAsync'),	deletePropertyAsync: handlerPrefix['without'](NAMESPACE, 'deletePropertyAsync')}export const getters = {	useList: handlerPrefix['without'](NAMESPACE, 'useList'),	useDetail: handlerPrefix['without'](NAMESPACE, 'useDetail'),	isListLoading: handlerPrefix['without'](NAMESPACE, 'isListLoading'),	isDetailLoading: handlerPrefix['without'](NAMESPACE, 'isDetailLoading'),	isListEmpty: handlerPrefix['without'](NAMESPACE, 'isListEmpty'),	isDetailEmpty: handlerPrefix['without'](NAMESPACE, 'isDetailEmpty'),	isCreateLoading: handlerPrefix['without'](NAMESPACE, 'isCreateLoading'),	isUpdateLoading: handlerPrefix['without'](NAMESPACE, 'isUpdateLoading'),	isDeleteLoading: handlerPrefix['without'](NAMESPACE, 'isDeleteLoading')}