import { Event, v1Api } from 'shared/api'import { RESOURCE } from 'shared/config'import { handlerError, handlerPrefix } from 'shared/lib'import { router } from 'app/providers'export const module = {	namespaced: true,	state: (): IEntityState<Event> => ({		list: [],		listLoading: false,		createLoading: false,		updateLoading: false,		deleteLoading: false	}),	mutations: {		setList: (s: IEntityState<Event>, payload: { data: Event[] }) =>			(s.list = payload.data.filter(				(e: Event) => e.facility?.id === Number(router.currentRoute.value.params.id)			)),		setListLoading: (s: IEntityState<Event>, payload: boolean) => (s.listLoading = payload),		createEvent: (s: IEntityState<Event>, payload: { data: Event }) => s.list.push(payload.data),		updateEvent: (s: IEntityState<Event>, payload: { data: Event }) =>			s.list.forEach((e: Event) => {				e.name = payload.data.name				e.value = payload.data.value				e.date_confirm = payload.data.date_confirm			}),		deleteEvent: (s: IEntityState<Event>, id: number) => {			const index = s.list.findIndex((e: Event) => e.id === id)			if (index !== -1) {				s.list.splice(index, 1)			}		},		setCreateLoading: (s: IEntityState<Event>, payload: boolean) => (s.createLoading = payload),		setUpdateLoading: (s: IEntityState<Event>, payload: boolean) => (s.updateLoading = payload),		setDeleteLoading: (s: IEntityState<Event>, payload: boolean) => (s.deleteLoading = payload)	},	actions: {		async getEventListAsync({ commit }: ICommit): Promise<void> {			commit('setListLoading', true)			try {				commit('setList', await v1Api.events.getAllEvents())			} catch (e: unknown) {				handlerError(e, 'Ошибка получения событий')			} finally {				commit('setListLoading', false)			}		},		async createEventAsync({ commit }: ICommit, params: v1Api.events.IEventParams): Promise<void> {			commit('setCreateLoading', true)			try {				commit('createEvent', await v1Api.events.createNewEvent(params))			} catch (e: unknown) {				handlerError(e, 'Ошибка создания события')			} finally {				commit('setCreateLoading', false)			}		},		async updateEventAsync({ commit }: ICommit, { id, params }: v1Api.events.IUpdateEventProps): Promise<void> {			commit('setUpdateLoading', true)			try {				commit('updateEvent', await v1Api.events.updateEventById({ id, params }))			} catch (e: unknown) {				handlerError(e, 'Ошибка обновления события')			} finally {				commit('setUpdateLoading', false)			}		},		async deleteEventAsync({ commit }: ICommit, id: v1Api.events.ICurrentEvent): Promise<void> {			commit('setDeleteLoading', true)			try {				await v1Api.events.deleteEventById(id)			} catch (e: unknown) {				handlerError(e, 'Ошибка удаления события')			} finally {				commit('setDeleteLoading', false)			}		}	},	getters: {		useList: (s: IEntityState<Event>) => s.list,		isListLoading: (s: IEntityState<Event>) => s.listLoading,		isListEmpty: (s: IEntityState<Event>) => s.list.length <= 0,		isCreateLoading: (s: IEntityState<Event>) => s.createLoading,		isUpdateLoading: (s: IEntityState<Event>) => s.updateLoading	}}export const NAMESPACE = RESOURCE['events']export const actions = {	getEventListAsync: handlerPrefix['without'](NAMESPACE, 'getEventListAsync'),	createEventAsync: handlerPrefix['without'](NAMESPACE, 'createEventAsync'),	updateEventAsync: handlerPrefix['without'](NAMESPACE, 'updateEventAsync'),	deleteEventAsync: handlerPrefix['without'](NAMESPACE, 'deleteEventAsync')}export const getters = {	useList: handlerPrefix['without'](NAMESPACE, 'useList'),	useDetail: handlerPrefix['without'](NAMESPACE, 'useDetail'),	isListLoading: handlerPrefix['without'](NAMESPACE, 'isListLoading'),	isDetailLoading: handlerPrefix['without'](NAMESPACE, 'isDetailLoading'),	isListEmpty: handlerPrefix['without'](NAMESPACE, 'isListEmpty'),	isDetailEmpty: handlerPrefix['without'](NAMESPACE, 'isDetailEmpty'),	isCreateLoading: handlerPrefix['without'](NAMESPACE, 'isCreateLoading'),	isUpdateLoading: handlerPrefix['without'](NAMESPACE, 'isUpdateLoading'),	isDeleteLoading: handlerPrefix['without'](NAMESPACE, 'isDeleteLoading')}